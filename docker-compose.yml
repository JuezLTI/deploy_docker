version: '3'
services:
  tsugi-codetest:
    container_name: tsugi_codetest_container
    image: tsugi_codetest_img
    restart: unless-stopped
    depends_on:
      - tsugi-mysql-db
      - spring-codetest
    environment:
      TSUGI_DOMAIN: ${TSUGI_DOMAIN}
      MYSQL_HOST: ${MYSQL_HOST}
      MYSQL_PORT: ${MYSQL_PORT}
      MYSQL_DB: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASS: ${MYSQL_PASSWORD}
      SPRING_CODETEST_URL: ${SPRING_URL}
      SPRING_CODETEST_PORT: ${SPRING_PORT}
      CODETEST_REST_FILE_PATH: ${CODETEST_REST_FILE_PATH}
      TSUGI_ADMIN_PASSWORD: ${TSUGI_ADMIN_PASSWORD}
      TSUGI_PANIC_RESTART_PASSWORD: ${TSUGI_PANIC_RESTART_PASSWORD}
      TSUGI_PANIC_RESTART_EMAIL: ${TSUGI_PANIC_RESTART_EMAIL}
      TSUGI_LANG: ${TSUGI_LANG}
      TSUGI_GOOGLE_CLIENT_SECRET: ${TSUGI_GOOGLE_CLIENT_SECRET}
      TSUGI_GOOGLE_CLIENT_ID: ${TSUGI_GOOGLE_CLIENT_ID}
      TSUGI_OWNER_NAME: ${TSUGI_OWNER_NAME}
      TSUGI_OWNER_EMAIL: ${TSUGI_OWNER_EMAIL}
      TSUGI_PROVIDE_KEYS: ${TSUGI_PROVIDE_KEYS}
      TSUGI_DEVELOPER_MODE: ${TSUGI_DEVELOPER_MODE}
      TSUGI_MAIL_DOMAIN: ${TSUGI_MAIL_DOMAIN}
      TSUGI_MAIL_SECRET: ${TSUGI_MAIL_SECRET}
      CENTRAL_REPOSITORY_USER: ${CENTRAL_REPOSITORY_USER}
      CENTRAL_REPOSITORY_PASS: ${CENTRAL_REPOSITORY_PASS}
      AK_BASE_URL: ${AK_BASE_URL}
      AK_USER: ${AK_USER}
      AK_PASS: ${AK_PASS}
    build:
      context: ./tsugi/
      dockerfile: Dockerfile_tsugi-ct
      args:
        TSUGI_BRANCH: ${TSUGI_BRANCH}
        CODETEST_BRANCH: ${CODETEST_BRANCH}
    command: bash -c "/var/www/html/tsugi/mod/codetest/init-tsugi.sh"
    stdin_open: true
    tty: true
    volumes:
      - "./tsugi/config_tsugi_docker.php:/var/www/html/tsugi/config.php:rw"
      - "./tsugi/config_codetest_docker.php:/var/www/html/tsugi/mod/codetest/config.php:rw"
      - type: bind
        source: ./pipe/hostpipe
        target: /var/pipe/hostpipe
  spring-codetest:
    container_name: spring_codetest_container
    image: spring_codetest_img
    restart: unless-stopped
    environment:
      MONGO_HOST: ${MONGODB_HOSTNAME}
      MONGO_PORT: ${MONGODB_PORT}
      MONGO_USER: ${MONGODB_USERNAME}
      MONGO_PASS: ${MONGODB_PASSWORD}
      MONGO_DDBB: ${MONGODB_DATABASE}
      JWT_SECRET: ${SPRING_JWT_SECRET}
      REGISTER_SECRET: ${CENTRAL_REPOSITORY_REGISTER_PASS}
    build:
      context: ./central-repository/
      dockerfile: Dockerfile_repo
      args:
          REPO_BRANCH: ${REPO_BRANCH}
    depends_on:
      - spring-mongo-db
    volumes:
      - './central-repository/application.properties:/app/questions-storage/src/main/resources/application.properties:rw'
      - './central-repository/spring-files:/codetest'
    ports:
      - 8079:8080
      - 8015:5005
  xml-validator:
    container_name: xml-validator_container
    image: xml-validator_img
    restart: unless-stopped
    build:
      context: ./validators/
      dockerfile: Dockerfile_xml_validator
      args:
        XML_VALIDATOR_BRANCH: ${XML_VALIDATOR_BRANCH}
    environment:
      FEEDBACK_MANAGER_URL: ${FEEDBACK_MANAGER_URL}
      BASE_URL: ${SPRING_REQUESTS_BASE_URL}/api
      PORT: ${NODE_SERVER_PORT}
      EMAIL: ${CENTRAL_REPOSITORY_USER}
      PASSWORD: ${CENTRAL_REPOSITORY_PASS}
  java-validator:
    container_name: java-validator_container
    image: java-validator_img
    restart: unless-stopped
    build:
      context: ./validators/
      dockerfile: Dockerfile_java_validator
      args:
        NODE_VERSION: ${NODE_VERSION}
    environment:
      FEEDBACK_MANAGER_URL: ${FEEDBACK_MANAGER_URL}
      BASE_URL: ${SPRING_REQUESTS_BASE_URL}/api
      PORT: ${NODE_SERVER_PORT}
      EMAIL: ${CENTRAL_REPOSITORY_USER}
      PASSWORD: ${CENTRAL_REPOSITORY_PASS}
    volumes:
      - './validators/src_volume/java-evaluator/server/dev-server:/app/java-evaluator/server/dev-server'
  sql-validator:
    container_name: sql-validator_container
    image: sql-validator_img
    restart: unless-stopped
    build:
      context: ./validators/
      dockerfile: Dockerfile_sql_validator
      args:
        NODE_VERSION: ${NODE_VERSION}
    environment:
      FEEDBACK_MANAGER_URL: ${FEEDBACK_MANAGER_URL}
      BASE_URL: ${SPRING_REQUESTS_BASE_URL}/api
      EMAIL: ${CENTRAL_REPOSITORY_USER}
      PASSWORD: ${CENTRAL_REPOSITORY_PASS}
      SQL_EVALUATOR_DBMS: ${SQL_EVALUATOR_DBMS}
      SQL_EVALUATOR_PORT: ${SQL_POSTGRES_PORT}
      SQL_EVALUATOR_USER: ${SQL_POSTGRES_USER}
      SQL_EVALUATOR_PASSWORD: ${SQL_POSTGRES_PASSWORD}
      SQL_EVALUATOR_DATABASE: ${SQL_POSTGRES_DATABASE}
      SQL_EVALUATOR_HOST: ${SQL_EVALUATOR_HOST}
      SQL_EVALUATOR_USERPREFIX: ${SQL_EVALUATOR_USERPREFIX}
      CREATEISOLATEUSERPROCEDURE: ${CREATEISOLATEUSERPROCEDURE}
      DROPISOLATEUSERPROCEDURE: ${DROPISOLATEUSERPROCEDURE}
    volumes:
      - './validators/src_volume/sql-evaluator/server/dev-server:/app/sql-evaluator/server/dev-server'
    depends_on:
      - db-validator-postgres
  db-validator-postgres:
    container_name: ${SQL_EVALUATOR_HOST}
    image: postgres:${SQL_POSTGRES_VERSION}
    restart: always
    environment:
      POSTGRES_USER: ${SQL_POSTGRES_USER}
      POSTGRES_PASSWORD: ${SQL_POSTGRES_PASSWORD}
      POSTGRES_DATABASE: ${SQL_POSTGRES_DATABASE}
      POSTGRES_PORT: ${SQL_POSTGRES_PORT}
    volumes:
      - ./validators/src_volume/sql-evaluator/sql_servers/postgres_sql/initScripts:/docker-entrypoint-initdb.d
  feedback-manager:
    container_name: feedback-manager_container
    image: feedback-manager_img
    restart: unless-stopped
    environment:
      PORT: ${FEEDBACK_MANAGER_PORT}
      FEEDBACK_MONGO_URI: ${FEEDBACK_MONGO_URI}
      BASE_URL: ${SPRING_REQUESTS_BASE_URL}/api
      BASE_PORT: 3000
      EMAIL: ${CENTRAL_REPOSITORY_USER}
      PASSWORD: ${CENTRAL_REPOSITORY_PASS}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_API_MODEL: ${OPENAI_API_MODEL}
    build:
      context: ./validators/
      dockerfile: Dockerfile_feedback_manager
      args:
        PORT: ${FEEDBACK_MANAGER_PORT}
        FEEDBACK_MANAGER_BRANCH: ${FEEDBACK_MANAGER_BRANCH}
    ports:
      - 3001:3003
  mongo-validator:
    container_name: mongo-validator_container
    image: mongo-validator_img
    restart: unless-stopped
    build:
      context: ./validators/
      dockerfile: Dockerfile_mongo_validator
      args:
        GITHUB_TOKEN: ${GITHUB_TOKEN}
        NODE_VERSION: ${NODE_VERSION}
        MONGO_VALIDATOR_BRANCH: ${MONGO_VALIDATOR_BRANCH}
    environment:
      FEEDBACK_MANAGER_URL: ${FEEDBACK_MANAGER_URL}
      BASE_URL: ${SPRING_REQUESTS_BASE_URL}/api
      PORT: ${NODE_SERVER_PORT}
      EMAIL: ${SPRING_REQUESTS_EMAIL}
      PASSWORD: ${SPRING_REQUESTS_PASSWORD}
      MONGO_DB_VALIDATOR_PORT: ${MONGO_DB_VALIDATOR_PORT}
      MONGO_DB_CONTAINER_NAME: ${MONGO_DB_CONTAINER_NAME}
    volumes:
      - './validators/src_volume/mongo-evaluator/server/dev-server:/app/mongo-evaluator/server/dev-server'
#  template-validator:
#    container_name: template-validator_container
#    image: template-validator_img
#    restart: unless-stopped
#    build:
#      context: ./validators/
#      dockerfile: Dockerfile_template_validator
#      args:
#        GITHUB_TOKEN: ${GITHUB_TOKEN}
#        NODE_VERSION: ${NODE_VERSION}
#        TEMPLATE_VALIDATOR_BRANCH: ${TEMPLATE_VALIDATOR_BRANCH}
#    environment:
#      FEEDBACK_MANAGER_URL: ${FEEDBACK_MANAGER_URL}
#      BASE_URL: ${SPRING_REQUESTS_BASE_URL}/api
#      PORT: ${NODE_SERVER_PORT}
#      EMAIL: ${SPRING_REQUESTS_EMAIL}
#      PASSWORD: ${SPRING_REQUESTS_PASSWORD}
  tsugi-mysql-db:
    container_name: tsugi_mysql_db_container
    image: 'mysql:5.7'
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - 'mysql_data_container:/var/lib/mysql:delegated'
    ports:
      - 3307:3306
  spring-mongo-db:
    container_name: spring_mongo_db_container
    image: 'mongo:4.4.9'
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGODB_DATABASE}
    volumes:
      - 'mongodb_data_container:/data/db'
      - ./mongodb/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    ports:
      - 27018:27017
  nginx:
    container_name: nginx_container
    image: nginx
    restart: unless-stopped
    depends_on:
      - tsugi-codetest
    volumes:
      - ./nginx:/etc/nginx/templates
      - ./gateway:/app/static
      - ./nginx/certs:/opt/certs
    ports:
      - ${NGINX_PORT}:80
      - ${NGINX_SECURE_PORT}:443
    environment:
      NGINX_SPRING_REPO_URL: ${NGINX_SPRING_REPO_URL}
      NGINX_APPLICATION_URL: ${NGINX_APPLICATION_URL}
      NGINX_TSUGI_URL: ${NGINX_TSUGI_URL}
volumes:
  mongodb_data_container:
  mysql_data_container:
  spring-files:
